{"version":3,"sources":["Components/Header/index.jsx","Components/RepoCard/RepoCard.css.js","Components/RepoCard/index.jsx","Components/HomePage/index.jsx","Components/NoMatch/index.jsx","Components/RepoTable/index.jsx","App.jsx","actions/index.js","actions/ActionTypes.js","reducers/home.js","reducers/index.js","initializeStore.js","Style.css.js","index.jsx"],"names":["StyledHeader","styled","AppBar","Header","position","Toolbar","variant","Typography","color","CardHeader","StyledBox","props","margin","IconBox","Types","RepoSkeleton","Fragment","Card","elevation","avatar","Skeleton","animation","width","height","title","CardContent","Divider","map","name","Chip","key","style","padding","icon","label","marginLeft","dependency","Badge","badgeContent","Alerts","RepoCard","Repo","React","useState","open","setOpen","handleClick","copyText","str","el","document","createElement","value","setAttribute","left","body","appendChild","select","execCommand","removeChild","copyToClipboard","size","titleTypographyProps","Link","href","link","target","rel","owner","Tooltip","id","emailId","onClick","reviewer","repoType","index","indexOf","getIcon","package","version","Snackbar","autoHideDuration","onClose","severity","StyledButton","Button","connect","state","Repos","home","loading","startIcon","Grid","container","spacing","item","xs","sm","md","display","alignItems","justifyItems","NoMatch","RepoData","array","packages","dep","push","filter","forEach","element","repo","Package","length","getRepoData","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","minWidth","toUpperCase","TableBody","row","scope","align","App","this","getRepos","changeLoading","exact","path","HomePage","RepoTable","Component","dispatch","type","a","repos","data","Response","initialState","reducer","action","createReducer","asyncReducers","combineReducers","middleware","thunk","initializeStore","store","createStore","applyMiddleware","injectReducer","replaceReducer","GlobalStyle","createGlobalStyle","fontFamily","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.bab06099.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledHeader = styled(AppBar)`    \r\n        background-image: linear-gradient(#314755 0%, #26a0da 51%, #314755 100%);\r\n        // background-image: linear-gradient(to right, #003973 0%, #E5E5BE 100%);     \r\n        align-items : center;   \r\n    `   \r\n\r\nexport default function Header() {  \r\n\r\n  return (    \r\n      <StyledHeader position=\"static\">\r\n        <Toolbar variant=\"dense\">                     \r\n            <Typography variant=\"h6\" color=\"inherit\">\r\n                Maintainers Info\r\n            </Typography>\r\n        </Toolbar>\r\n      </StyledHeader>    \r\n  );\r\n}\r\n","import CardHeader from '@material-ui/core/CardHeader';\r\nimport styled from 'styled-components';\r\n\r\nexport const StyledHeader = styled(CardHeader)`\r\n    &&{\r\n        padding-top : 2px;\r\n        padding-bottom : 2px;\r\n        background-image: linear-gradient(to right, #314755 0%, #26a0da 100%);\r\n        // background-image: linear-gradient(to right, #003973 0%, #E5E5BE 100%);\r\n        color : #fff;\r\n        font-size : 34px;        \r\n    }`   \r\n\r\nexport const StyledBox = styled('div')`\r\n        align-items : center;\r\n        display : flex;      \r\n        margin-top : ${props => props.margin ? '10px' : '0'};\r\n`\r\nexport const IconBox = styled('div')`\r\n        display: inline-grid;\r\n        justify-items: center; \r\n        width: 100px;    \r\n`","import React from 'react';\r\nimport {Card,CardContent,Typography,Divider,Tooltip,Chip,Snackbar,Badge,Link} from '@material-ui/core';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport {StyledHeader,StyledBox,IconBox} from  './RepoCard.css';\r\nimport FolderSpecialIcon from '@material-ui/icons/FolderSpecial';\r\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport PagesIcon from '@material-ui/icons/Pages';\r\nimport ExtensionIcon from '@material-ui/icons/Extension';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nconst Types = ['Component','Module','Application'];\r\n\r\nexport const RepoSkeleton = () => {return(\r\n\r\n            <React.Fragment>\r\n                <Card elevation={6}>\r\n                <StyledHeader \r\n                            avatar={<Skeleton animation=\"wave\" variant=\"circle\" width={40} height={40} />}\r\n                            title={<Skeleton animation=\"wave\" height={30} width=\"80%\" />}\r\n                            />                           \r\n                <CardContent>\r\n                    <StyledBox>\r\n                        <IconBox>\r\n                            <LinkIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Link\r\n                            </Typography>\r\n                        </IconBox>\r\n                        <Skeleton animation=\"wave\" height={30} width={180} />                                              \r\n                    </StyledBox>     \r\n                    <Divider  />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <PersonIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Owner\r\n                            </Typography>\r\n                        </IconBox>                        \r\n                        <div >\r\n                            {[0,1].map(name=>                                                                  \r\n                                        <Chip key={name} style={{padding:'4px', margin : '4px'}} \r\n                                        icon={<Skeleton animation=\"wave\" variant=\"circle\" width={20} height={20}/>}                                         \r\n                                        label={<Skeleton animation=\"wave\" height={20} width={80}/>} variant=\"outlined\"/>                                                                   \r\n                            )}                            \r\n                        </div>\r\n                    </StyledBox>    \r\n                    <Divider />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <PersonIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Reviewer\r\n                            </Typography>\r\n                        </IconBox>                                                \r\n                        <div >\r\n                            {[0,1].map(name=>                                                                  \r\n                                        <Chip key={name} style={{padding:'4px', margin : '4px'}} \r\n                                        icon={<Skeleton animation=\"wave\" variant=\"circle\" width={20} height={20}/>}                                         \r\n                                        label={<Skeleton animation=\"wave\" height={20} width={80}/>} variant=\"outlined\"/>                                                                \r\n                            )} \r\n                        </div>\r\n                    </StyledBox>   \r\n                    <Divider />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <FolderSpecialIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Repo Type\r\n                            </Typography>\r\n                        </IconBox>                        \r\n                        <div >                        \r\n                            <StyledBox>                                           \r\n                                    <Skeleton animation=\"wave\" variant=\"circle\" width={30} height={30}/>                \r\n                                    <Skeleton animation=\"wave\" height={30} width={100} style={{marginLeft : '4px'}}/>\r\n                            </StyledBox>                                                                                       \r\n                        </div>\r\n                    </StyledBox>  \r\n                    <Divider />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <AccountTreeIcon/>                    \r\n                            <Typography variant={'caption'}  >                                \r\n                                Dependency\r\n                            </Typography>\r\n                        </IconBox>                        \r\n                        <div >\r\n                            {[0,1].map(dependency =>                                \r\n                                    <Badge key={dependency} color=\"secondary\" badgeContent={''} style={{margin : '15px'}}>\r\n                                        <Skeleton animation=\"wave\" height={30} width={100}/>\r\n                                    </Badge>                                                                                         \r\n                            )}                        \r\n                        </div>\r\n                    </StyledBox>                                                                                  \r\n                </CardContent>                \r\n            </Card>            \r\n        </React.Fragment>\r\n)}           \r\n\r\nfunction getIcon(name){\r\n        let index = Types.indexOf(name);\r\n        if(index === 0){\r\n            return <ExtensionIcon color={'action'}/>\r\n        }\r\n        else if(index === 1){\r\n            return <PagesIcon color={'action'}/>\r\n        }\r\n        else{\r\n            return <AppsIcon color={'action'}/>\r\n        }\r\n\r\n}\r\n\r\nfunction Alerts(props) {\r\n                return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n              }            \r\n\r\nconst copyToClipboard = str => {\r\n                const el = document.createElement('textarea');\r\n                el.value = str;\r\n                el.setAttribute('readonly', '');\r\n                el.style.position = 'absolute';\r\n                el.style.left = '-9999px';\r\n                document.body.appendChild(el);\r\n                el.select();\r\n                document.execCommand('copy');\r\n                document.body.removeChild(el);\r\n              };            \r\n\r\nexport default function RepoCard({Repo}){\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClick = () => setOpen(!open);    \r\n  \r\n    const copyText = (str) => {copyToClipboard(str); handleClick();};\r\n\r\n    return(\r\n        <React.Fragment>\r\n             <Card elevation={6}>\r\n                <StyledHeader title={Repo.name} \r\n                            avatar={<FolderOpenIcon size='medium'/>}\r\n                            titleTypographyProps = {{variant : 'h6'}}                \r\n                />                        \r\n                <CardContent>\r\n                    <StyledBox>\r\n                        <IconBox>\r\n                            <LinkIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Link\r\n                            </Typography>\r\n                        </IconBox>\r\n                        <Link href={Repo.link} target=\"_blank\" rel=\"noopener\">\r\n                            {Repo.link}\r\n                        </Link>                                                \r\n                    </StyledBox>     \r\n                    <Divider  />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <PersonIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Owner\r\n                            </Typography>\r\n                        </IconBox>                        \r\n                        <div >\r\n                            {Repo.owner.map(name=>                              \r\n                                    <Tooltip key={name.id} title={name.emailId}>\r\n                                        <Chip style={{padding:'4px', margin : '4px'}} \r\n                                        icon={<PersonIcon/> } \r\n                                        onClick={()=>copyText(name.emailId)} \r\n                                        label={name.name} variant=\"outlined\"/>                            \r\n                                    </Tooltip>    \r\n                            )}                            \r\n                        </div>\r\n                    </StyledBox>    \r\n                    <Divider />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <PersonIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Reviewer\r\n                            </Typography>\r\n                        </IconBox>                                                \r\n                        <div >\r\n                            {Repo.reviewer.map(name=>                              \r\n                                    <Tooltip key={name.id} title={name.emailId}>\r\n                                        <Chip style={{padding:'4px', margin : '4px'}} \r\n                                        icon={<PersonIcon/> } \r\n                                        onClick={()=>copyText(name.emailId)} \r\n                                        label={name.name} variant=\"outlined\"/>                                                                    \r\n                                    </Tooltip>    \r\n                            )}\r\n                        </div>\r\n                    </StyledBox>   \r\n                    <Divider />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <FolderSpecialIcon/>                    \r\n                            <Typography variant={'caption'}  >\r\n                                Repo Type\r\n                            </Typography>\r\n                        </IconBox>                        \r\n                        <div >\r\n                        {Repo.repoType && \r\n                            <StyledBox>                                           \r\n                                    {getIcon(Repo.repoType)}                \r\n                                    <Typography style={{marginLeft : '4px'}} variant={'h6'} color={'textSecondary'}>{Repo.repoType}</Typography>                                                                    \r\n                            </StyledBox>\r\n                        }                                                                 \r\n                        </div>\r\n                    </StyledBox>  \r\n                    <Divider />\r\n                    <StyledBox margin>\r\n                        <IconBox>\r\n                            <AccountTreeIcon/>                    \r\n                            <Typography variant={'caption'}  >                                \r\n                                Dependency\r\n                            </Typography>\r\n                        </IconBox>                        \r\n                        <div >\r\n                            {Repo.dependency.map(dependency =>                                \r\n                                    <Badge key={dependency.package} color=\"secondary\" badgeContent={dependency.version} style={{margin : '15px'}}>\r\n                                        <Typography variant={'h6'} color={'textSecondary'}>{dependency.package}</Typography>\r\n                                    </Badge>                                                                                         \r\n                            )}                        \r\n                        </div>\r\n                    </StyledBox>  \r\n                    <Snackbar open={open} autoHideDuration={1000} onClose={handleClick}>\r\n                            <Alerts onClose={handleClick} severity=\"success\">\r\n                                Email copied to clipboard\r\n                            </Alerts>\r\n                    </Snackbar>                                                             \r\n                </CardContent>                \r\n            </Card>            \r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react';\r\nimport {Grid,Button} from '@material-ui/core';\r\nimport RepoCard,{RepoSkeleton} from '../../Components/RepoCard';\r\nimport { connect } from \"react-redux\";\r\nimport styled from 'styled-components';\r\nimport TableChartIcon from '@material-ui/icons/TableChart';\r\n\r\n\r\nconst StyledBox = styled('div')({\r\n  padding : '20px'\r\n});\r\n\r\nconst StyledButton = styled(Button)`\r\n      &&{\r\n        margin-bottom : 20px;\r\n        float : right;\r\n      }\r\n`\r\n\r\nfunction HomePage(props){\r\n      const {Repos,loading} = props;     \r\n    return (\r\n      <StyledBox>\r\n          <StyledButton href='#/Table' startIcon={<TableChartIcon />}>View Table</StyledButton>         \r\n          <Grid container spacing={2}>\r\n              {loading ?\r\n                  [0,1].map(value =>                         \r\n                        <Grid key={value} item xs={12} sm={6} md={4}>\r\n                            <RepoSkeleton/>\r\n                  </Grid> ) :                    \r\n                  Repos.map(value =>                         \r\n                    <Grid key={value.name} item xs={12} sm={6} md={4}>\r\n                        <RepoCard Repo={value}/>\r\n                    </Grid>)}\r\n          </Grid>\r\n      </StyledBox>\r\n    )\r\n};\r\n\r\nconst mapStatesToProps = state => {\r\n     return {\r\n        Repos : state.home.Repos,\r\n        loading : state.home.loading        \r\n     } \r\n};\r\n\r\nexport default connect(mapStatesToProps)(HomePage);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst StyledBox = styled('div')({\r\n    display : 'grid',\r\n    alignItems : 'center',\r\n    justifyItems : 'center',\r\n    height : '100vh'\r\n})\r\n\r\nexport default function NoMatch() {\r\n  return (\r\n    <StyledBox>\r\n        <div>\r\n            <Typography variant='h1' >{'404'}</Typography>\r\n            <Typography variant='h6' >{'Page not found!'}</Typography>\r\n        </div>        \r\n    </StyledBox>\r\n  );\r\n};","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport styled from 'styled-components';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nconst StyledBox = styled('div')({\r\n  padding : '20px'\r\n});\r\n\r\nconst StyledButton = styled(Button)`\r\n      &&{\r\n        margin-bottom : 20px;\r\n        float : right;\r\n      }\r\n`\r\nconst getRepoData = (array) => {  \r\n    let packages = [];\r\n    let Repo = [];  \r\n    array.map( value => value.dependency.map(dep => packages.push(dep.package)));\r\n    packages = packages.filter((value,index) => packages.indexOf(value) === index);\r\n    array.forEach(element => {\r\n      let repo = { name : element.name};    \r\n      packages.map(Package => {\r\n            let dependency = element.dependency.filter(value => value.package === Package);          \r\n            repo[Package] = dependency.length > 0 ? dependency[0].version : '';\r\n      })\r\n      Repo.push(repo);\r\n    });\r\n    return {Repo,packages};    \r\n  };\r\n\r\n\r\nfunction RepoTable(props) {\r\n        const RepoData = getRepoData(props.Repos);\r\n  return (\r\n    <StyledBox>\r\n      <StyledButton href='#' startIcon={<ArrowBackIcon />}>Back</StyledButton>          \r\n      <TableContainer component={Paper}>\r\n        <Table >\r\n          <TableHead>\r\n            <TableRow>\r\n            <TableCell style={{minWidth : '80px'}}>NAME</TableCell>\r\n              {RepoData.packages.map(name => <TableCell style={{minWidth : '80px'}} key={name}>{name.toUpperCase()}</TableCell>)}            \r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {RepoData.Repo.map((row) => (\r\n              <TableRow key={row.name}>\r\n                <TableCell style={{minWidth : '80px'}} component=\"th\" scope=\"row\">\r\n                  {row.name}\r\n                </TableCell>\r\n                {RepoData.packages.map(name=> <TableCell key={name} align={'center'} style={{minWidth : '80px'}}>{row[name]}</TableCell>)}            \r\n              </TableRow>\r\n            ))} \r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </StyledBox>\r\n  );\r\n}\r\n\r\n\r\nconst mapStatesToProps = state => {\r\n    return {\r\n       Repos : state.home.Repos       \r\n    } \r\n};\r\n\r\nexport default connect(mapStatesToProps)(RepoTable);","import React from 'react';\r\nimport Header from './Components/Header';\r\nimport HomePage from './Components/HomePage';\r\nimport NoMatch from './Components/NoMatch';\r\nimport RepoTable from './Components/RepoTable';\r\nimport { connect } from \"react-redux\";\r\nimport {changeLoading,getRepos} from './actions';\r\nimport {HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n  async componentDidMount(){\r\n      await this.props.getRepos();      \r\n      this.props.changeLoading();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n          <Header/>\r\n          <Router>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={HomePage}/>    \r\n              <Route exact path=\"/Table\" component={RepoTable}/>                              \r\n              <Route path=\"*\" component={NoMatch}/>                \r\n            </Switch>\r\n          </Router>          \r\n      </React.Fragment>\r\n    );\r\n  };\r\n};\r\n\r\nexport default connect(null,{changeLoading,getRepos})(App);","import * as types from './ActionTypes';\r\nimport data from './RepoFolders.json';\r\n\r\nexport const changeLoading =()=> dispatch => dispatch({type: types.CHANGE_LOADING});\r\n\r\n\r\nexport const getRepos = () => async(dispatch) => {           \r\n    dispatch({type : types.GET_REPOS, repos : data.Response});\r\n}\r\n","export const CHANGE_LOADING = 'CHANGE_LOADING'\r\nexport const GET_REPOS = 'GET_REPOS'","import * as types from '../actions/ActionTypes';\r\n\r\nconst initialState = {\r\n    Repos : [],\r\n    loading : true   \r\n  };\r\n  \r\n  export default function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case types.CHANGE_LOADING:\r\n        return {\r\n          ...state,          \r\n          loading : !state.loading\r\n      }\r\n      case types.GET_REPOS:\r\n        return {\r\n          ...state,          \r\n          Repos : action.repos\r\n      }           \r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","import { combineReducers } from \"redux\";\r\nimport home from \"./home\";\r\n\r\nconst createReducer = asyncReducers =>\r\n  combineReducers({\r\n    home,     \r\n    ...asyncReducers\r\n  });\r\n\r\nexport default createReducer;","import { createStore,applyMiddleware } from \"redux\";\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport createReducer from \"./reducers\";\r\n\r\nlet middleware = [ thunk ];\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middleware.push(logger);  \r\n} \r\n\r\nconst initializeStore = () => {\r\n  \r\n  const store = createStore(    \r\n    createReducer(),       \r\n    applyMiddleware(...middleware)     \r\n  ); \r\n\r\n  store.asyncReducers = {};\r\n\r\n  store.injectReducer = (key, reducer) => {    \r\n    store.asyncReducers[key] = reducer;    \r\n    store.replaceReducer(createReducer(store.asyncReducers));\r\n    return store;\r\n  };\r\n\r\n  return store;\r\n};\r\n\r\nexport default initializeStore;","import { createGlobalStyle} from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle({\r\n    body : {\r\n      height: '100vh',\r\n      margin : 0,\r\n      fontFamily: \"'Roboto', sans-serif\"\r\n    }    \r\n  });","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport initializeStore from './initializeStore';\r\nimport {GlobalStyle} from './Style.css';\r\n\r\nconst store = initializeStore();\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <Provider store={store}>\r\n      <GlobalStyle/>\r\n      <App />\r\n    </Provider>\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}